# ===============================
# Laravel + Nginx + PHP-FPM + MariaDB + phpMyAdmin 開発環境構築用
# ===============================

# Docker Compose バージョン指定（省略可能）
# version: '3.8'

services:
  # ------------------------------------------------
  # Nginx：Webサーバー（Laravelのリクエスト受け口）
  # ------------------------------------------------
  nginx:
    build:
      context: ./docker-config/nginx           # Nginx用Dockerfileの場所
      dockerfile: Dockerfile                   # 使用するDockerfile名
    container_name: ${COMPOSE_PROJECT_NAME}-nginx

    ports:
      - "${NGINX_PORT:-8080}:80"               # ホスト→コンテナ: ポートマッピング（例: 8080でアクセス）

    volumes:
      - ./my-app:/var/www                      # Laravelアプリ全体をマウント
      - ./docker-config/nginx/default.conf:/etc/nginx/conf.d/default.conf  # Nginx設定
      - ./docker-config/errors:/var/log/nginx/errors                       # エラーログ出力先

    depends_on:
      - php                                    # PHP起動後にNginxを起動

    networks:
      - app-network

  # ------------------------------------------------
  # PHP-FPM：Laravelアプリケーションの実行エンジン
  # ------------------------------------------------
  php:
    build:
      context: ./docker-config/php
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-php

    volumes:
      - ./my-app:/var/www
      - ./docker-config/php/php.ini:/usr/local/etc/php/php.ini
      - ./docker-config/errors:/var/log/php-fpm/errors

    environment:
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: ${MARIADB_DATABASE}
      DB_USERNAME: ${MARIADB_USER}
      DB_PASSWORD: ${MARIADB_PASSWORD}
      TZ: ${TZ:-Asia/Tokyo}                    # タイムゾーン設定（デフォルト Asia/Tokyo）

    depends_on:
      - db

    networks:
      - app-network

  # ------------------------------------------------
  # MariaDB：MySQL互換のリレーショナルDB
  # ------------------------------------------------
  db:
    # Dockerfile を使用して MariaDB をビルドしたい場合はこちらを使用（今回は使用せず image に切替）
    # build:
    #   context: ./docker-config/db/conf
    #   dockerfile: Dockerfile
    #   args:
    #     MARIADB_VERSION: ${MARIADB_VERSION}  # .env ファイルから MariaDB バージョンを受け取る

    image: mariadb:${MARIADB_VERSION:-10.11}         # 公式の MariaDB イメージ（.env の値でバージョン指定）
    container_name: ${COMPOSE_PROJECT_NAME}-db  # プロジェクト名を元にコンテナ名を設定

    restart: always                            # コンテナが落ちたら自動再起動
    tty: true                                  # 対話型コンソールログを有効化

    environment:
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}  # root パスワード（必須）
      MYSQL_DATABASE: ${MARIADB_DATABASE}            # 作成される DB 名
      MYSQL_USER: ${MARIADB_USER}                    # DB ユーザー名
      MYSQL_PASSWORD: ${MARIADB_PASSWORD}            # DB ユーザーパスワード

    volumes:
      - ./docker-config/db/data:/var/lib/mysql                # MariaDB データ保存領域（永続化）
      - ./docker-config/db/conf/my.conf:/etc/mysql/conf.d/my.conf  # MariaDB 設定ファイル
      - ./docker-config/db/sql:/docker-entrypoint-initdb.d    # 初回起動時に実行する SQL

    ports:
      # 直接ホストの 3306 をバインドすると競合する可能性があるので注意（他の DB が動いている場合）
      - "${DB_PORT}:3306" # - "3306:3306"
      # - "${DB_PORT:-3307}:3306"  # .env に DB_PORT を定義し、競合しないよう変更（例：3307）

    networks:
      - app-network  # 他サービスとつながるネットワーク（phpやnginxなどと通信可能）

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # コンテナ起動後、ヘルスチェックを開始するまでの期間

  # ------------------------------------------------
  # phpMyAdmin：MariaDBのGUI管理ツール
  # ------------------------------------------------
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    platform: linux/amd64                      # Apple Silicon対応
    container_name: ${COMPOSE_PROJECT_NAME}-phpmyadmin

    restart: always

    environment:
      PMA_HOST: db                              # 接続先DBサービス名
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}

    ports:
      - "${PHPMYADMIN_PORT:-8081}:80"           # ホスト→phpMyAdminへのアクセス

    depends_on:
      - db

    networks:
      - app-network

# ------------------------------------------------
# 永続化ボリューム：MariaDBデータ保持用
# ------------------------------------------------
volumes:
  db-data:
    driver: local

# ------------------------------------------------
# サービス間の仮想ネットワーク
# ------------------------------------------------
networks:
  app-network:
    driver: bridge
